name: API Test Execution

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions for the github-actions bot
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test-execution:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    # Setup Java
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'maven'

    # Install K6
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    # Install dependencies
    - name: Install dependencies
      run: |
        npm install
        npm install -g k6

    # Install Playwright Chromium browser
    - name: Install Playwright Chromium
      run: npx playwright install chromium --with-deps

    # Run Playwright tests
    - name: Run Playwright tests
      run: npx playwright test
      
    # Run SuperTest tests
    - name: Run SuperTest tests
      run: npm run test:supertest

    # Run Java tests
    - name: Run REST Assured tests
      run: |
        cd java-api-tests
        mvn clean test

    # Run K6 Performance tests and generate HTML report
    - name: Run K6 tests
      run: |
        mkdir -p k6-report
        k6 run k6/store-performance.js --out json=k6-report/results.json
        k6 run k6/store-playwright-converted.js --out json=k6-report/converted-results.json

    # Generate K6 HTML report
    - name: Generate K6 HTML report
      run: |
        echo '
        <!DOCTYPE html>
        <html>
        <head>
            <title>K6 Performance Test Results</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .metrics { margin: 20px 0; padding: 20px; border: 1px solid #ddd; }
                .metric { margin: 10px 0; }
                .pass { color: green; }
                .fail { color: red; }
            </style>
        </head>
        <body>
            <h1>Store Performance Test Results</h1>
            <div class="metrics">
                <pre id="results"></pre>
            </div>
            <script>
                fetch("results.json")
                    .then(response => response.json())
                    .then(data => {
                        const metrics = data.metrics;
                        const html = Object.entries(metrics)
                            .map(([key, value]) => {
                                const avg = value.values?.avg || "N/A";
                                const p95 = value.values?.p95 || "N/A";
                                return `
                                    <div class="metric">
                                        <h3>${key}</h3>
                                        <p>Average: ${avg}</p>
                                        <p>95th percentile: ${p95}</p>
                                    </div>
                                `;
                            })
                            .join("");
                        document.getElementById("results").innerHTML = html;
                    });
            </script>
        </body>
        </html>' > k6-report/results.html

        echo '
        <!DOCTYPE html>
        <html>
        <head>
            <title>K6 Performance Test Results (Converted)</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .metrics { margin: 20px 0; padding: 20px; border: 1px solid #ddd; }
                .metric { margin: 10px 0; }
                .pass { color: green; }
                .fail { color: red; }
            </style>
        </head>
        <body>
            <h1>Store Performance Test Results (Converted)</h1>
            <div class="metrics">
                <pre id="results"></pre>
            </div>
            <script>
                fetch("converted-results.json")
                    .then(response => response.json())
                    .then(data => {
                        const metrics = data.metrics;
                        const html = Object.entries(metrics)
                            .map(([key, value]) => {
                                const avg = value.values?.avg || "N/A";
                                const p95 = value.values?.p95 || "N/A";
                                return `
                                    <div class="metric">
                                        <h3>${key}</h3>
                                        <p>Average: ${avg}</p>
                                        <p>95th percentile: ${p95}</p>
                                    </div>
                                `;
                            })
                            .join("");
                        document.getElementById("results").innerHTML = html;
                    });
            </script>
        </body>
        </html>' > k6-report/converted-results.html

    # Create combined report directory
    - name: Create combined report
      if: always()
      run: |
        mkdir -p reports
        # Copy Playwright report if it exists
        if [ -d "playwright-report" ]; then
          cp -r playwright-report reports/
        else
          mkdir -p reports/playwright-report
          echo "<html><body><h1>No Playwright report available</h1></body></html>" > reports/playwright-report/index.html
        fi
        
        # Copy REST Assured report if it exists
        if [ -d "java-api-tests/target/surefire-reports" ]; then
          mkdir -p reports/rest-assured-report
          cp -r java-api-tests/target/surefire-reports/* reports/rest-assured-report/
        else
          mkdir -p reports/rest-assured-report
          echo "<html><body><h1>No REST Assured report available</h1></body></html>" > reports/rest-assured-report/index.html
        fi
        
        # Copy K6 report if it exists
        if [ -d "k6-report" ]; then
          cp -r k6-report reports/
        else
          mkdir -p reports/k6-report
          echo "<html><body><h1>No K6 report available</h1></body></html>" > reports/k6-report/index.html
        fi
        
        # Copy SuperTest report if it exists
        if [ -f "test-report.html" ]; then
          cp test-report.html reports/supertest-report.html
        else
          echo "<html><body><h1>No SuperTest report available</h1></body></html>" > reports/supertest-report.html
        fi
        
        # Create index.html
        echo '<!DOCTYPE html>
        <html>
        <head>
            <title>API Testing Framework Comparison - Test Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; }
                iframe { width: 100%; height: 600px; border: none; }
                h1, h2, h3 { color: #333; }
            </style>
        </head>
        <body>
            <h1>API Testing Framework Comparison - Test Reports</h1>
            
            <div class="section">
                <h2>Playwright API Tests</h2>
                <iframe src="./playwright-report/index.html"></iframe>
            </div>
            
            <div class="section">
                <h2>SuperTest API Tests</h2>
                <iframe src="./supertest-report.html"></iframe>
            </div>
            
            <div class="section">
                <h2>REST Assured Tests</h2>
                <iframe src="./rest-assured-report/index.html"></iframe>
            </div>
            
            <div class="section">
                <h2>K6 Performance Tests</h2>
                <div class="k6-reports">
                    <h3>Store Performance Test</h3>
                    <iframe src="./k6-report/results.html"></iframe>
                    <h3>Store Playwright Converted Test</h3>
                    <iframe src="./k6-report/converted-results.html"></iframe>
                </div>
            </div>
        </body>
        </html>' > reports/index.html

    # Upload reports as artifacts
    - name: Upload reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: reports/
        if-no-files-found: error

    # Configure GitHub Pages
    - name: Setup Pages
      uses: actions/configure-pages@v3

    # Upload GitHub Pages artifact
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: reports/

    # Deploy to GitHub Pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

    # Add summary with links
    - name: Add links to summary
      run: |
        echo "## ðŸ“Š Test Reports" >> $GITHUB_STEP_SUMMARY
        echo "- [View Reports on GitHub Pages](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Reports Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
